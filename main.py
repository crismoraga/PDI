#!/usr/bin/env python3
"""
Pokedex Animal - Aplicaci√≥n de Reconocimiento de Animales
Asignatura: Procesamiento Digital de Im√°genes

Este programa utiliza OpenCV para capturar video de la c√°mara,
TensorFlow/Keras para clasificar animales usando machine learning,
y APIs web para obtener informaci√≥n detallada sobre los animales detectados.

Autor: Estudiante PDI
Fecha: Septiembre 2025
"""

import cv2
import numpy as np
import tensorflow as tf
from tensorflow import keras
import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import threading
import time
import sys
import os

# Importar m√≥dulos personalizados
from utils.camera import CameraCapture
from utils.image_processing import ImageProcessor
from utils.api import AnimalInfoAPI
from model.animal_classifier import AnimalClassifier

class AnimalPokedexApp:
    """
    Aplicaci√≥n principal de la Pokedex Animal
    """
    
    def __init__(self):
        """Inicializar la aplicaci√≥n"""
        self.root = tk.Tk()
        self.root.title("üêæ Pokedex Animal - PDI Project")
        self.root.geometry("1200x800")
        
        # Variables de control
        self.camera_active = False
        self.current_prediction = ""
        self.confidence_score = 0.0
        
        # Inicializar componentes
        self.setup_components()
        self.setup_ui()
        
    def setup_components(self):
        """Configurar los componentes principales"""
        print("üîß Inicializando componentes...")
        
        # Inicializar c√°mara
        self.camera = CameraCapture()
        
        # Inicializar procesador de im√°genes
        self.image_processor = ImageProcessor()
        
        # Inicializar clasificador de animales
        self.classifier = AnimalClassifier()
        
        # Inicializar API de informaci√≥n
        self.animal_api = AnimalInfoAPI()
        
        print("‚úÖ Componentes inicializados correctamente")
        
    def setup_ui(self):
        """Configurar la interfaz de usuario"""
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, text="üêæ Pokedex Animal", 
                               font=('Arial', 20, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Frame de video
        video_frame = ttk.LabelFrame(main_frame, text="üìπ C√°mara en Vivo", padding="10")
        video_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        self.video_label = ttk.Label(video_frame)
        self.video_label.pack()
        
        # Frame de informaci√≥n
        info_frame = ttk.LabelFrame(main_frame, text="üìã Informaci√≥n del Animal", padding="10")
        info_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Predicci√≥n actual
        self.prediction_label = ttk.Label(info_frame, text="Animal: No detectado", 
                                         font=('Arial', 14, 'bold'))
        self.prediction_label.pack(anchor='w', pady=(0, 10))
        
        # Confianza
        self.confidence_label = ttk.Label(info_frame, text="Confianza: 0%")
        self.confidence_label.pack(anchor='w', pady=(0, 10))
        
        # Informaci√≥n detallada
        self.info_text = tk.Text(info_frame, wrap=tk.WORD, height=20, width=40)
        self.info_text.pack(fill=tk.BOTH, expand=True)
        
        # Scrollbar para el texto
        scrollbar = ttk.Scrollbar(info_frame, orient=tk.VERTICAL, command=self.info_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.info_text.config(yscrollcommand=scrollbar.set)
        
        # Frame de controles
        controls_frame = ttk.Frame(main_frame)
        controls_frame.grid(row=2, column=0, columnspan=2, pady=(20, 0))
        
        # Botones de control
        self.start_button = ttk.Button(controls_frame, text="üé• Iniciar C√°mara", 
                                      command=self.toggle_camera)
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.capture_button = ttk.Button(controls_frame, text="üì∏ Capturar y Analizar", 
                                        command=self.capture_and_analyze)
        self.capture_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.quit_button = ttk.Button(controls_frame, text="‚ùå Salir", 
                                     command=self.quit_app)
        self.quit_button.pack(side=tk.LEFT)
        
    def toggle_camera(self):
        """Activar/desactivar la c√°mara"""
        if not self.camera_active:
            self.start_camera()
        else:
            self.stop_camera()
            
    def start_camera(self):
        """Iniciar la captura de c√°mara"""
        if self.camera.start():
            self.camera_active = True
            self.start_button.config(text="‚èπÔ∏è Detener C√°mara")
            self.update_video_feed()
            print("üìπ C√°mara iniciada")
        else:
            print("‚ùå Error al iniciar la c√°mara")
            
    def stop_camera(self):
        """Detener la captura de c√°mara"""
        self.camera_active = False
        self.camera.stop()
        self.start_button.config(text="üé• Iniciar C√°mara")
        print("‚èπÔ∏è C√°mara detenida")
        
    def update_video_feed(self):
        """Actualizar el feed de video"""
        if self.camera_active:
            frame = self.camera.get_frame()
            if frame is not None:
                # Redimensionar frame para la UI
                frame = cv2.resize(frame, (640, 480))
                
                # Convertir de BGR a RGB
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                
                # Convertir a formato PIL
                pil_image = Image.fromarray(frame_rgb)
                photo = ImageTk.PhotoImage(pil_image)
                
                # Actualizar label
                self.video_label.configure(image=photo)
                self.video_label.image = photo
                
            # Programar siguiente actualizaci√≥n
            self.root.after(30, self.update_video_feed)
            
    def capture_and_analyze(self):
        """Capturar frame actual y analizarlo"""
        if not self.camera_active:
            print("‚ö†Ô∏è La c√°mara no est√° activa")
            return
            
        frame = self.camera.get_frame()
        if frame is None:
            print("‚ùå No se pudo capturar el frame")
            return
            
        print("üîç Analizando imagen...")
        
        # Procesar imagen
        processed_frame = self.image_processor.preprocess_for_classification(frame)
        
        # Realizar predicci√≥n
        prediction, confidence = self.classifier.predict(processed_frame)
        
        # Actualizar UI con predicci√≥n
        self.current_prediction = prediction
        self.confidence_score = confidence
        
        self.prediction_label.config(text=f"Animal: {prediction}")
        self.confidence_label.config(text=f"Confianza: {confidence:.1%}")
        
        # Buscar informaci√≥n del animal en internet
        if confidence > 0.3:  # Solo si la confianza es mayor al 30%
            self.search_animal_info(prediction)
        else:
            self.info_text.delete(1.0, tk.END)
            self.info_text.insert(tk.END, "Confianza muy baja. Intenta con mejor iluminaci√≥n o ac√©rcate m√°s al animal.")
            
    def search_animal_info(self, animal_name):
        """Buscar informaci√≥n del animal en internet"""
        def search_thread():
            try:
                self.info_text.delete(1.0, tk.END)
                self.info_text.insert(tk.END, "üîç Buscando informaci√≥n...")
                
                info = self.animal_api.get_animal_info(animal_name)
                
                self.info_text.delete(1.0, tk.END)
                if info:
                    formatted_info = self.format_animal_info(info)
                    self.info_text.insert(tk.END, formatted_info)
                else:
                    self.info_text.insert(tk.END, f"No se encontr√≥ informaci√≥n para: {animal_name}")
                    
            except Exception as e:
                self.info_text.delete(1.0, tk.END)
                self.info_text.insert(tk.END, f"Error al buscar informaci√≥n: {str(e)}")
                
        # Ejecutar b√∫squeda en hilo separado
        threading.Thread(target=search_thread, daemon=True).start()
        
    def format_animal_info(self, info):
        """Formatear la informaci√≥n del animal para mostrar"""
        formatted = f"üêæ {info.get('name', 'Desconocido')}\n\n"
        
        if info.get('summary'):
            formatted += f"üìñ Descripci√≥n:\n{info['summary']}\n\n"
            
        if info.get('habitat'):
            formatted += f"üè† H√°bitat:\n{info['habitat']}\n\n"
            
        if info.get('diet'):
            formatted += f"üçΩÔ∏è Dieta:\n{info['diet']}\n\n"
            
        if info.get('characteristics'):
            formatted += f"‚≠ê Caracter√≠sticas:\n{info['characteristics']}\n\n"
            
        if info.get('conservation_status'):
            formatted += f"üåç Estado de Conservaci√≥n:\n{info['conservation_status']}\n\n"
            
        return formatted
        
    def quit_app(self):
        """Cerrar la aplicaci√≥n"""
        self.stop_camera()
        self.root.quit()
        self.root.destroy()
        
    def run(self):
        """Ejecutar la aplicaci√≥n"""
        print("üöÄ Iniciando Pokedex Animal...")
        self.root.protocol("WM_DELETE_WINDOW", self.quit_app)
        self.root.mainloop()

def main():
    """Funci√≥n principal"""
    print("=" * 60)
    print("üêæ POKEDEX ANIMAL - Procesamiento Digital de Im√°genes")
    print("=" * 60)
    
    try:
        app = AnimalPokedexApp()
        app.run()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Aplicaci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {str(e)}")
        import traceback
        traceback.print_exc()
    finally:
        print("üëã ¬°Gracias por usar Pokedex Animal!")

if __name__ == "__main__":
    main()
