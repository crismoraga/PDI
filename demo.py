#!/usr/bin/env python3
"""
Demo de Pokedex Animal - Versi√≥n sin c√°mara para pruebas
"""

import cv2
import numpy as np
import tensorflow as tf
from tensorflow import keras
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
import threading
import time
import sys
import os

# Importar m√≥dulos personalizados
from utils.image_processing import ImageProcessor
from utils.api import AnimalInfoAPI
from model.animal_classifier import AnimalClassifier

class AnimalPokedexDemo:
    """
    Versi√≥n demo de la Pokedex Animal (sin c√°mara)
    """
    
    def __init__(self):
        """Inicializar la aplicaci√≥n demo"""
        self.root = tk.Tk()
        self.root.title("üêæ Pokedex Animal - Demo (Sin C√°mara)")
        self.root.geometry("1000x700")
        
        # Variables de control
        self.current_image = None
        self.current_prediction = ""
        self.confidence_score = 0.0
        
        # Inicializar componentes
        self.setup_components()
        self.setup_ui()
        
    def setup_components(self):
        """Configurar los componentes principales"""
        print("üîß Inicializando componentes...")
        
        # Inicializar procesador de im√°genes
        self.image_processor = ImageProcessor()
        
        # Inicializar clasificador de animales
        self.classifier = AnimalClassifier()
        
        # Inicializar API de informaci√≥n
        self.animal_api = AnimalInfoAPI()
        
        print("‚úÖ Componentes inicializados correctamente")
        
    def setup_ui(self):
        """Configurar la interfaz de usuario"""
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, text="üêæ Pokedex Animal - Demo", 
                               font=('Arial', 20, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Frame de imagen
        image_frame = ttk.LabelFrame(main_frame, text="üì∏ Imagen del Animal", padding="10")
        image_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        self.image_label = ttk.Label(image_frame, text="Selecciona una imagen para analizar")
        self.image_label.pack()
        
        # Frame de informaci√≥n
        info_frame = ttk.LabelFrame(main_frame, text="üìã Informaci√≥n del Animal", padding="10")
        info_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Predicci√≥n actual
        self.prediction_label = ttk.Label(info_frame, text="Animal: No detectado", 
                                         font=('Arial', 14, 'bold'))
        self.prediction_label.pack(anchor='w', pady=(0, 10))
        
        # Confianza
        self.confidence_label = ttk.Label(info_frame, text="Confianza: 0%")
        self.confidence_label.pack(anchor='w', pady=(0, 10))
        
        # Informaci√≥n detallada
        self.info_text = tk.Text(info_frame, wrap=tk.WORD, height=15, width=40)
        self.info_text.pack(fill=tk.BOTH, expand=True)
        
        # Scrollbar para el texto
        scrollbar = ttk.Scrollbar(info_frame, orient=tk.VERTICAL, command=self.info_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.info_text.config(yscrollcommand=scrollbar.set)
        
        # Frame de controles
        controls_frame = ttk.Frame(main_frame)
        controls_frame.grid(row=2, column=0, columnspan=2, pady=(20, 0))
        
        # Botones de control
        self.load_button = ttk.Button(controls_frame, text="üìÅ Cargar Imagen", 
                                     command=self.load_image)
        self.load_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.analyze_button = ttk.Button(controls_frame, text="üîç Analizar Animal", 
                                        command=self.analyze_image)
        self.analyze_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.demo_button = ttk.Button(controls_frame, text="üéØ An√°lisis Demo", 
                                     command=self.demo_analysis)
        self.demo_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.quit_button = ttk.Button(controls_frame, text="‚ùå Salir", 
                                     command=self.quit_app)
        self.quit_button.pack(side=tk.LEFT)
        
        # Informaci√≥n inicial
        self.show_welcome_message()
        
    def show_welcome_message(self):
        """Mostrar mensaje de bienvenida"""
        welcome = """üêæ ¬°Bienvenido a Pokedex Animal!

Esta es la versi√≥n demo del proyecto de Procesamiento Digital de Im√°genes.

FUNCIONALIDADES:
‚Ä¢ üìÅ Cargar Imagen: Selecciona una foto de un animal
‚Ä¢ üîç Analizar Animal: Identifica la especie usando IA
‚Ä¢ üéØ An√°lisis Demo: Prueba con im√°genes predefinidas
‚Ä¢ üåê Informaci√≥n: Busca datos del animal en internet

TECNOLOG√çAS USADAS:
‚Ä¢ OpenCV: Procesamiento de im√°genes
‚Ä¢ TensorFlow: Machine Learning (MobileNetV2)
‚Ä¢ Wikipedia API: Informaci√≥n de especies
‚Ä¢ Tkinter: Interfaz gr√°fica

INSTRUCCIONES:
1. Carga una imagen de un animal
2. Presiona "Analizar Animal"
3. Ve la predicci√≥n y informaci√≥n detallada

¬°Prueba la funcionalidad demo para ver el sistema en acci√≥n!"""
        
        self.info_text.insert(tk.END, welcome)
        
    def load_image(self):
        """Cargar imagen desde archivo"""
        file_types = [
            ('Im√°genes', '*.jpg *.jpeg *.png *.bmp *.gif *.tiff'),
            ('JPEG', '*.jpg *.jpeg'),
            ('PNG', '*.png'),
            ('Todos los archivos', '*.*')
        ]
        
        filename = filedialog.askopenfilename(
            title="Seleccionar imagen de animal",
            filetypes=file_types
        )
        
        if filename:
            try:
                # Cargar imagen
                self.current_image = cv2.imread(filename)
                
                if self.current_image is None:
                    messagebox.showerror("Error", "No se pudo cargar la imagen")
                    return
                
                # Mostrar imagen en la interfaz
                self.display_image(self.current_image)
                
                print(f"‚úÖ Imagen cargada: {filename}")
                
            except Exception as e:
                messagebox.showerror("Error", f"Error al cargar imagen: {str(e)}")
                
    def display_image(self, image):
        """Mostrar imagen en la interfaz"""
        # Redimensionar para mostrar
        display_image = image.copy()
        
        # Calcular nuevo tama√±o manteniendo proporci√≥n
        height, width = display_image.shape[:2]
        max_size = 400
        
        if width > height:
            new_width = max_size
            new_height = int(height * max_size / width)
        else:
            new_height = max_size
            new_width = int(width * max_size / height)
            
        display_image = cv2.resize(display_image, (new_width, new_height))
        
        # Convertir de BGR a RGB
        display_image_rgb = cv2.cvtColor(display_image, cv2.COLOR_BGR2RGB)
        
        # Convertir a formato PIL
        pil_image = Image.fromarray(display_image_rgb)
        photo = ImageTk.PhotoImage(pil_image)
        
        # Actualizar label
        self.image_label.configure(image=photo, text="")
        self.image_label.image = photo
        
    def analyze_image(self):
        """Analizar la imagen cargada"""
        if self.current_image is None:
            messagebox.showwarning("Advertencia", "Primero carga una imagen")
            return
            
        print("üîç Analizando imagen...")
        
        try:
            # Procesar imagen
            processed_image = self.image_processor.preprocess_for_classification(self.current_image)
            
            # Realizar predicci√≥n
            prediction, confidence = self.classifier.predict(processed_image)
            
            # Actualizar UI con predicci√≥n
            self.current_prediction = prediction
            self.confidence_score = confidence
            
            self.prediction_label.config(text=f"Animal: {prediction}")
            self.confidence_label.config(text=f"Confianza: {confidence:.1%}")
            
            # Buscar informaci√≥n del animal
            if confidence > 0.1:  # Umbral m√°s bajo para demo
                self.search_animal_info(prediction)
            else:
                self.info_text.delete(1.0, tk.END)
                self.info_text.insert(tk.END, "Confianza muy baja. La imagen podr√≠a no contener un animal reconocible o la calidad es insuficiente.")
                
        except Exception as e:
            messagebox.showerror("Error", f"Error al analizar imagen: {str(e)}")
            print(f"‚ùå Error en an√°lisis: {str(e)}")
            
    def demo_analysis(self):
        """Realizar an√°lisis de demostraci√≥n"""
        print("üéØ Ejecutando an√°lisis demo...")
        
        # Crear imagen sint√©tica de ejemplo
        demo_image = self.create_demo_image()
        self.current_image = demo_image
        
        # Mostrar imagen
        self.display_image(demo_image)
        
        # Simular an√°lisis
        demo_animals = ["Perro", "Gato", "Le√≥n", "Tigre", "Elefante"]
        demo_confidence = [0.85, 0.92, 0.78, 0.88, 0.75]
        
        import random
        idx = random.randint(0, len(demo_animals)-1)
        
        prediction = demo_animals[idx]
        confidence = demo_confidence[idx]
        
        self.current_prediction = prediction
        self.confidence_score = confidence
        
        self.prediction_label.config(text=f"Animal: {prediction}")
        self.confidence_label.config(text=f"Confianza: {confidence:.1%}")
        
        # Mostrar informaci√≥n demo
        self.show_demo_info(prediction)
        
    def create_demo_image(self):
        """Crear imagen demo para pruebas"""
        # Crear imagen sint√©tica
        image = np.random.randint(0, 255, (400, 400, 3), dtype=np.uint8)
        
        # Agregar algunos patrones para simular un animal
        cv2.circle(image, (200, 200), 100, (139, 69, 19), -1)  # Cuerpo marr√≥n
        cv2.circle(image, (170, 170), 30, (139, 69, 19), -1)   # Cabeza
        cv2.circle(image, (160, 160), 5, (0, 0, 0), -1)        # Ojo
        cv2.circle(image, (180, 160), 5, (0, 0, 0), -1)        # Ojo
        
        return image
        
    def search_animal_info(self, animal_name):
        """Buscar informaci√≥n del animal"""
        def search_thread():
            try:
                self.info_text.delete(1.0, tk.END)
                self.info_text.insert(tk.END, "üîç Buscando informaci√≥n...")
                self.root.update()
                
                # Para demo, mostrar informaci√≥n b√°sica
                self.show_demo_info(animal_name)
                    
            except Exception as e:
                self.info_text.delete(1.0, tk.END)
                self.info_text.insert(tk.END, f"Error al buscar informaci√≥n: {str(e)}")
                
        # Ejecutar b√∫squeda en hilo separado
        threading.Thread(target=search_thread, daemon=True).start()
        
    def show_demo_info(self, animal_name):
        """Mostrar informaci√≥n demo del animal"""
        # Informaci√≥n demo predefinida
        demo_info = {
            "Perro": {
                "description": "El perro (Canis lupus familiaris) es un mam√≠fero carn√≠voro dom√©stico. Es una subespecie del lobo gris y est√° relacionado con zorros, chacales y otros c√°nidos.",
                "habitat": "Los perros dom√©sticos viven junto a los humanos en todo el mundo. Se adaptan a diversos ambientes urbanos y rurales.",
                "diet": "Los perros son omn√≠voros que se alimentan de carne, vegetales y granos. Su dieta debe incluir prote√≠nas, carbohidratos y grasas.",
                "characteristics": "Poseen un excelente sentido del olfato y o√≠do. Son animales sociales, leales y pueden ser entrenados para diversas tareas.",
                "conservation": "Especie dom√©stica estable. Sin riesgo de extinci√≥n."
            },
            "Gato": {
                "description": "El gato dom√©stico (Felis catus) es un mam√≠fero carn√≠voro peque√±o. Es la √∫nica especie domesticada de la familia Felidae.",
                "habitat": "Los gatos dom√©sticos viven en hogares humanos en todo el mundo. Tambi√©n existen poblaciones ferales en diversos h√°bitats.",
                "diet": "Son carn√≠voros obligados que requieren una dieta rica en prote√≠nas animales, especialmente taurina.",
                "characteristics": "Poseen excelente visi√≥n nocturna, agilidad y flexibilidad. Son cazadores naturales con garras retr√°ctiles.",
                "conservation": "Especie dom√©stica estable. Sin riesgo de extinci√≥n."
            },
            "Le√≥n": {
                "description": "El le√≥n (Panthera leo) es un felino grande conocido como 'el rey de la selva'. Vive en grupos llamados manadas.",
                "habitat": "Principalmente en sabanas africanas, con una peque√±a poblaci√≥n en India (Bosque de Gir).",
                "diet": "Carn√≠voro que caza grandes mam√≠feros como cebras, √±us, b√∫falos y ant√≠lopes.",
                "characteristics": "Los machos tienen melena distintiva. Peso: 150-250 kg. Excelentes cazadores grupales.",
                "conservation": "Vulnerable - Poblaci√≥n en declive debido a p√©rdida de h√°bitat y caza."
            },
            "Tigre": {
                "description": "El tigre (Panthera tigris) es el felino m√°s grande del mundo. Conocido por sus rayas distintivas.",
                "habitat": "Bosques, manglares y pastizales de Asia (India, China, Rusia, Sudeste Asi√°tico).",
                "diet": "Carn√≠voro que caza ciervos, jabal√≠es, b√∫falos de agua y otros grandes mam√≠feros.",
                "characteristics": "Rayas √∫nicas como huellas dactilares. Peso: 140-300 kg. Cazadores solitarios.",
                "conservation": "En peligro - Quedan aproximadamente 3,900 tigres en estado salvaje."
            },
            "Elefante": {
                "description": "Los elefantes son los mam√≠feros terrestres m√°s grandes. Existen dos especies: africano y asi√°tico.",
                "habitat": "Sabanas africanas, bosques tropicales de √Åfrica y Asia.",
                "diet": "Herb√≠voros que consumen hasta 300 kg de vegetaci√≥n diaria: hierbas, frutas, cortezas.",
                "characteristics": "Trompa vers√°til, memoria excepcional, estructura social matriarcal. Peso: 4,000-7,000 kg.",
                "conservation": "Vulnerable - Amenazados por caza furtiva y p√©rdida de h√°bitat."
            }
        }
        
        info = demo_info.get(animal_name, {
            "description": f"Informaci√≥n sobre {animal_name} no disponible en modo demo.",
            "habitat": "Informaci√≥n no disponible",
            "diet": "Informaci√≥n no disponible", 
            "characteristics": "Informaci√≥n no disponible",
            "conservation": "Informaci√≥n no disponible"
        })
        
        formatted_info = f"""üêæ {animal_name}

üìñ Descripci√≥n:
{info['description']}

üè† H√°bitat:
{info['habitat']}

üçΩÔ∏è Dieta:
{info['diet']}

‚≠ê Caracter√≠sticas:
{info['characteristics']}

üåç Estado de Conservaci√≥n:
{info['conservation']}

---
‚ÑπÔ∏è Esta es informaci√≥n demo. En la versi√≥n completa se obtiene de APIs externas en tiempo real."""
        
        self.info_text.delete(1.0, tk.END)
        self.info_text.insert(tk.END, formatted_info)
        
    def quit_app(self):
        """Cerrar la aplicaci√≥n"""
        self.root.quit()
        self.root.destroy()
        
    def run(self):
        """Ejecutar la aplicaci√≥n"""
        print("üöÄ Iniciando Pokedex Animal Demo...")
        self.root.protocol("WM_DELETE_WINDOW", self.quit_app)
        self.root.mainloop()

def main():
    """Funci√≥n principal"""
    print("=" * 60)
    print("üêæ POKEDEX ANIMAL - DEMO SIN C√ÅMARA")
    print("=" * 60)
    
    try:
        app = AnimalPokedexDemo()
        app.run()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Aplicaci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {str(e)}")
        import traceback
        traceback.print_exc()
    finally:
        print("üëã ¬°Gracias por usar Pokedex Animal Demo!")

if __name__ == "__main__":
    main()
